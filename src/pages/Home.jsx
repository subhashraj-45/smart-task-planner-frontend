// src/pages/Home.jsx (TRANSFORMED TO IMAGE 2 STYLE)
import React, { useState } from "react";
import { motion } from "framer-motion";
import { Box, Paper, Typography, Container } from "@mui/material";
import ChatInput from "../components/ChatInput"; // Will be modified below
// Removed ChatBubble as we are no longer using chat bubbles
import TaskList from "../components/TaskList";
import { generatePlan } from "../api/taskApi";Â 
import toast from "react-hot-toast";

export default function Home() {
Â  const [loading, setLoading] = useState(false);
Â  const [currentPlan, setCurrentPlan] = useState(null); // To store the latest generated plan
Â  const [goalText, setGoalText] = useState(""); // To display the goal above tasks

Â  // The complete, error-handling handleGenerate function (remains functional)
Â  const handleGenerate = async (goal) => {
Â  Â  setLoading(true);
Â  Â  setGoalText(goal); // Save goal to display above tasks

Â  Â  try {
Â  Â  Â  const data = await generatePlan(goal);
Â  Â  Â Â 
Â  Â  Â  console.log("Raw API Data:", data);Â 

Â  Â  Â  const tasks = (data && data.plan) || (data && data.tasks) || [];

Â  Â  Â  if (tasks.length === 0) {
Â  Â  Â  Â  toast.error("Plan generated, but no tasks found in response. Check console for Raw Data.");
Â  Â  Â  Â  setCurrentPlan(null); // Clear previous plan if empty response
Â  Â  Â  } else {
Â  Â  Â  Â  setCurrentPlan(tasks); // Set the plan directly
Â  Â  Â  Â  toast.success("Plan generated successfully!");
Â  Â  Â  }
Â  Â  } catch (err) {
Â  Â  Â  toast.error("Failed to connect to the server or generate plan. See console for error details.");
Â  Â  Â  console.error("API Generation Error:", err);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  return (
Â  Â  <Container maxWidth="md" sx={{ py: 4 }}>
Â  Â  Â  <Paper
Â  Â  Â  Â  elevation={6}
Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  borderRadius: 4,
Â  Â  Â  Â  Â  // ðŸ›‘ CHANGE: Entire main Paper background to white
Â  Â  Â  Â  Â  bgcolor: 'white',Â 
Â  Â  Â  Â  Â  color: 'text.primary',Â 
Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  flexDirection: "column",
Â  Â  Â  Â  Â  minHeight: 'calc(100vh - 120px)', // Ensure it's tall enough
Â  Â  Â  Â  Â  position: 'relative', // Needed for ChatInput positioning
Â  Â  Â  Â  Â  p: 3, // Padding for content
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  {/* Header for Saved Plans, like in Image 2 */}
Â  Â  Â  Â  <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
Â  Â  Â  Â  Â  <img src="/path/to/scroll-icon.png" alt="Scroll icon" style={{ height: '32px', marginRight: '8px' }} /> {/* Add an icon like in Image 2 */}
Â  Â  Â  Â  Â  <Typography variant="h5" fontWeight="bold">Saved Plans</Typography>
Â  Â  Â  Â  </Box>

Â  Â  Â  Â  {/* Display the Goal if a plan is present */}
Â  Â  Â  Â  {currentPlan && currentPlan.length > 0 && (
Â  Â  Â  Â  Â  <Box mb={3}>
Â  Â  Â  Â  Â  Â  <Typography variant="h6" fontWeight="medium">
Â  Â  Â  Â  Â  Â  Â  Goal: {goalText}
Â  Â  Â  Â  Â  Â  </Typography>
Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* Display the TaskList directly */}
Â  Â  Â  Â  {currentPlan && currentPlan.length > 0 ? (
Â  Â  Â  Â  Â  <TaskList tasks={currentPlan} />
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
Â  Â  Â  Â  Â  Â  <TypographyÂ 
Â  Â  Â  Â  Â  Â  Â  color="text.secondary"Â 
Â  Â  Â  Â  Â  Â  Â  textAlign="center"Â 
Â  Â  Â  Â  Â  Â  Â  mt={5}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Describe your goal to get an AI-generated task plan.
Â  Â  Â  Â  Â  Â  </Typography>
Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* ChatInput at the bottom */}
Â  Â  Â  Â  <Box
Â  Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  Â  position: 'absolute', // ðŸ›‘ CHANGE: Position input absolutely at the bottom
Â  Â  Â  Â  Â  Â  bottom: 0,
Â  Â  Â  Â  Â  Â  left: 0,
Â  Â  Â  Â  Â  Â  right: 0,
Â  Â  Â  Â  Â  Â  p: 2, // Padding for the input box itself
Â  Â  Â  Â  Â  Â  bgcolor: 'background.paper', // Match main background
Â  Â  Â  Â  Â  Â  borderTop: 1,
Â  Â  Â  Â  Â  Â  borderColor: 'grey.300',
Â  Â  Â  Â  Â  Â  zIndex: 1, // Ensure it's above other content if scrolling happens
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <ChatInput onGenerate={handleGenerate} loading={loading} />
Â  Â  Â  Â  </Box>
Â  Â  Â  </Paper>
Â  Â  </Container>
Â  );
}
