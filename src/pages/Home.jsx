// src/pages/Home.jsx (FINAL STYLING WITH SALMON BACKGROUND FIX)
import React, { useState } from "react";
import { motion } from "framer-motion";
import { Box, Paper, Typography, Container } from "@mui/material";
import ChatInput from "../components/ChatInput";
import ChatBubble from "../components/ChatBubble";
import TaskList from "../components/TaskList";
import { generatePlan } from "../api/taskApi";
import toast from "react-hot-toast";

export default function Home() {
Â  const [loading, setLoading] = useState(false);
Â  const [chat, setChat] = useState([]);

Â  const handleGenerate = async (goal) => { /* ... (function body remains the same) ... */ };

Â  return (
Â  Â  <Container maxWidth="md" sx={{ py: 4 }}>
Â  Â  Â  <Paper
Â  Â  Â  Â  elevation={6}
Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  borderRadius: 4,
Â  Â  Â  Â  Â  overflow: "hidden",
Â  Â  Â  Â  Â  // 1. BORDER COLOR: Use Deep Teal
Â  Â  Â  Â  Â  border: 1,
Â  Â  Â  Â  Â  borderColor: "text.primary",Â 
Â  Â  Â  Â  Â  display: "flex",
Â  Â  Â  Â  Â  flexDirection: "column",
Â  Â  Â  Â  Â  maxHeight: 'calc(100vh - 120px)',
Â  Â  Â  Â  Â  // ðŸ›‘ FIX: Use Light Salmon hex code directly
Â  Â  Â  Â  Â  bgcolor: '#D4A4B1',Â 
Â  Â  Â  Â  Â  // Set default text color to Deep Teal
Â  Â  Â  Â  Â  color: 'text.primary',Â 
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  <Box
Â  Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  Â  p: 3,
Â  Â  Â  Â  Â  Â  flexGrow: 1,
Â  Â  Â  Â  Â  Â  overflowY: "auto",
Â  Â  Â  Â  Â  Â  height: '100%',
Â  Â  Â  Â  Â  Â  // ðŸ›‘ FIX: Use Light Salmon hex code directly
Â  Â  Â  Â  Â  Â  bgcolor: '#D4A4B1',Â 
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {chat.length === 0 && (
Â  Â  Â  Â  Â  Â  <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
Â  Â  Â  Â  Â  Â  Â  <TypographyÂ 
Â  Â  Â  Â  Â  Â  Â  Â  // GREETING TEXT COLOR: Set to Deep Teal
Â  Â  Â  Â  Â  Â  Â  Â  color="text.primary"Â 
Â  Â  Â  Â  Â  Â  Â  Â  textAlign="center"Â 
Â  Â  Â  Â  Â  Â  Â  Â  mt={5}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Describe your Task.
Â  Â  Â  Â  Â  Â  Â  </Typography>
Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  {chat.map((msg, i) => (
Â  Â  Â  Â  Â  Â  <Box key={i}>
Â  Â  Â  Â  Â  Â  Â  <ChatBubbleÂ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  sender={msg.sender}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  text={msg.text}
Â  Â  Â  Â  Â  Â  Â  Â  Â  tasks={msg.tasks} // Passed to ChatBubble
Â  Â  Â  Â  Â  Â  Â  Â  Â  goal={msg.goal} // Passed to ChatBubble for copy logic
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {msg.tasks && <TaskList tasks={msg.tasks} />}
Â  Â  Â  Â  Â  Â  Â  </ChatBubble>
Â  Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </Box>

Â  Â  Â  Â  <ChatInput onGenerate={handleGenerate} loading={loading} />
Â  Â  Â  </Paper>
Â  Â  </Container>
Â  );
}
